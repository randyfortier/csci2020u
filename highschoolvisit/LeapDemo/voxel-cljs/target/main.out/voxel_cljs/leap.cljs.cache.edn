;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name voxel-cljs.leap, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {consume-frame {:protocol-inline nil, :meta {:file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/voxel-cljs/btj/-grrwi1/voxel_cljs/leap.cljs", :line 5, :column 7, :end-line 5, :end-column 20, :arglists (quote ([out frame]))}, :name voxel-cljs.leap/consume-frame, :variadic false, :file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/voxel-cljs/btj/-grrwi1/voxel_cljs/leap.cljs", :end-column 20, :method-params ([out frame]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([out frame]))}, options {:name voxel-cljs.leap/options, :file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/voxel-cljs/btj/-grrwi1/voxel_cljs/leap.cljs", :line 15, :column 1, :end-line 15, :end-column 13, :meta {:file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/voxel-cljs/btj/-grrwi1/voxel_cljs/leap.cljs", :line 15, :column 6, :end-line 15, :end-column 13}}, events {:protocol-inline nil, :meta {:file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/voxel-cljs/btj/-grrwi1/voxel_cljs/leap.cljs", :line 17, :column 7, :end-line 17, :end-column 13, :arglists (quote ([]))}, :name voxel-cljs.leap/events, :variadic false, :file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/voxel-cljs/btj/-grrwi1/voxel_cljs/leap.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:else :recur :normal :position}, :order [:recur :position :normal :else]}, :doc nil}