;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :excludes #{}, :name d3-cljs.events, :imports nil, :requires {cljs.core.async cljs.core.async}, :uses {timeout cljs.core.async, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :defs {ticks {:protocol-inline nil, :meta {:file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/d3-cljs/c0k/-grrwi1/d3_cljs/events.cljs", :line 5, :column 7, :end-line 5, :end-column 12, :arglists (quote ([duration max]))}, :name d3-cljs.events/ticks, :variadic false, :file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/d3-cljs/c0k/-grrwi1/d3_cljs/events.cljs", :end-column 12, :method-params ([duration max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([duration max]))}, e->data {:protocol-inline nil, :meta {:file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/d3-cljs/c0k/-grrwi1/d3_cljs/events.cljs", :line 16, :column 7, :end-line 16, :end-column 14, :arglists (quote ([w h e]))}, :name d3-cljs.events/e->data, :variadic false, :file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/d3-cljs/c0k/-grrwi1/d3_cljs/events.cljs", :end-column 14, :method-params ([w h e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 3, :fn-var true, :arglists (quote ([w h e]))}, clicks {:protocol-inline nil, :meta {:file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/d3-cljs/c0k/-grrwi1/d3_cljs/events.cljs", :line 22, :column 7, :end-line 22, :end-column 13, :arglists (quote ([]))}, :name d3-cljs.events/clicks, :variadic false, :file "/Users/kenpu/.boot/cache/tmp/Users/kenpu/clones/learn/learn-cljs/d3-cljs/c0k/-grrwi1/d3_cljs/events.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:y :else :recur :x}, :order [:recur :else :x :y]}, :doc nil}